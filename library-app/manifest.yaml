---
# Source: library-app/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: library-app-mysql
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  root-password: "cm9vdA=="
  database: "bGliX2Ri"
---
# Source: library-app/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: library-app-django
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  database-password: "cm9vdA=="
  database-user: "cm9vdA=="
  database-name: "bGliX2Ri"
---
# Source: library-app/templates/nginx/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: library-app-nginx-config
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  nginx.conf: |
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 5500;
        server_name localhost;

        location /_next/webpack-hmr {
            proxy_pass http://library-app-nextjs:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 3600s;
            proxy_buffering off;
            proxy_cache off;
        }

        location /_next/static/ {
            proxy_pass http://library-app-nextjs:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_valid 200 302 1d;
        }

        location /api/ {
            proxy_pass http://library-app-django:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ws/ {
            proxy_pass http://library-app-django:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;

            proxy_buffering off;
            proxy_cache off;
        }

        location / {
            proxy_pass http://library-app-nextjs:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_buffering off;
            proxy_cache off;
            proxy_redirect off;
        }
    }
---
# Source: library-app/templates/mysql/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: library-app-mysql-pvc
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
# Source: library-app/templates/django/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: library-app-django
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: django
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
  selector:
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    component: django
---
# Source: library-app/templates/mysql/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: library-app-mysql
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: mysql
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    component: mysql
---
# Source: library-app/templates/nextjs/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: library-app-nextjs
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: nextjs
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    component: nextjs
---
# Source: library-app/templates/nginx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: library-app-nginx
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: nginx
spec:
  type: LoadBalancer
  ports:
  - port: 5500
    targetPort: 5500
    protocol: TCP
  selector:
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    component: nginx
---
# Source: library-app/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: library-app-redis
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    component: redis
---
# Source: library-app/templates/django/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library-app-django
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: django
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: library-app
      app.kubernetes.io/instance: library-app
      component: django
  template:
    metadata:
      labels:
        app.kubernetes.io/name: library-app
        app.kubernetes.io/instance: library-app
        component: django
    spec:
      containers:
      - name: django
        image: "library-django:latest"
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
        env:  # ← environment ДОЛЖЕН БЫТЬ ЗДЕСЬ, внутри containers
        - name: DATABASE_HOST
          value: library-app-mysql
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: library-app-django
              key: database-name
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: library-app-django
              key: database-user
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: library-app-django
              key: database-password
        - name: DJANGO_SETTINGS_MODULE
          value: "backend.settings"
        - name: DJANGO_DEBUG
          value: "true"
        - name: WATCHMAN
          value: "true"
        - name: REDIS_HOST
          value: library-app-redis
        - name: REDIS_PORT
          value: "6379"
---
# Source: library-app/templates/mysql/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library-app-mysql
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: library-app
      app.kubernetes.io/instance: library-app
      component: mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: library-app
        app.kubernetes.io/instance: library-app
        component: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: library-app-mysql
              key: root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: library-app-mysql
              key: database
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -uroot -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -uroot -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: library-app-mysql-pvc
---
# Source: library-app/templates/nextjs/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library-app-nextjs
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: nextjs
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: library-app
      app.kubernetes.io/instance: library-app
      component: nextjs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: library-app
        app.kubernetes.io/instance: library-app
        component: nextjs
    spec:
      containers:
      - name: nextjs
        image: "library-nextjs:latest"
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: development
        - name: NEXT_PUBLIC_API_URL
          value: /api
        - name: WATCHPACK_POLLING
          value: true
        - name: NODE_PATH
          value: /app_parent/node_modules
        - name: PATH
          value: /app_parent/node_modules/.bin:$PATH
        - name: SKIP_PREFLIGHT_CHECK
          value: "true"
        resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
---
# Source: library-app/templates/nginx/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library-app-nginx
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: library-app
      app.kubernetes.io/instance: library-app
      component: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: library-app
        app.kubernetes.io/instance: library-app
        component: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 5500
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
      volumes:
      - name: nginx-config
        configMap:
          name: library-app-nginx-config
---
# Source: library-app/templates/redis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library-app-redis
  labels:
    helm.sh/chart: library-app
    app.kubernetes.io/name: library-app
    app.kubernetes.io/instance: library-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: library-app
      app.kubernetes.io/instance: library-app
      component: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: library-app
        app.kubernetes.io/instance: library-app
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        ports:
        - containerPort: 6379
        livenessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
